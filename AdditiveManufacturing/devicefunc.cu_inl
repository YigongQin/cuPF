__inline__ __device__ void 
G2L_3D(int pf_C, int &i, int &j, int &k, int &PF_id, int fnx, int fny, int fnz){

  k = pf_C/(fnx*fny);
  int pf_C_z=pf_C-k*fnx*fny; 
  j = pf_C_z/fnx;
  i = pf_C_z-j*fnx;

}


__inline__ __device__ void 
G2L_4D(int C, int &i, int &j, int &k, int &PF_id, int fnx, int fny, int fnz){

  PF_id = C/(fnx*fny*fnz);
  int pf_C = C - PF_id*fnx*fny*fnz;  // local C in every PF
  k = pf_C/(fnx*fny);
  int pf_C_z=pf_C-k*fnx*fny; 
  j = pf_C_z/fnx;
  i = pf_C_z-j*fnx;

}

__inline__ __device__ int 
L2G_4D(int i, int j, int k, int pf, int fnx, int fny, int fnz){

    return i + j*fnx + k*fnx*fny + pf*fnx*fny*fnz;

}


__inline__ __device__ float
interp4Dtemperature(float* u_3d, float x, float y, float z, float t, 
                    int Nx, int Ny, int Nz, int Nt, float Dx, float Dt)
{

  int kx = (int) (x/Dx);
  int ky = (int) (y/Dx);
  int kz = (int) (z/Dx);
  int kt = (int) (t/Dt);

  float delta_x = x/Dx - kx;
  float delta_y = y/Dx - ky;
  float delta_z = z/Dx - kz;
  float delta_t = t/Dt - kt;

  if (kx==Nx-1) 
  {
    kx = Nx-2; 
    delta_x = 1.0f;
  }
  if (ky==Ny-1) 
  {
    ky = Ny-2; 
    delta_y = 1.0f;
  }
  if (kz==Nz-1) 
  {
    kz = Nz-2; 
    delta_z = 1.0f;
  }
  if (kt==Nt-1) 
  {
    kt = Nt-2; 
    delta_t = 1.0f;
  }
  
  int offset =  kx + ky*Nx + kz*Nx*Ny + kt*Nx*Ny*Nz;
  int offset_n =  kx + ky*Nx + (kz+1)*Nx*Ny + kt*Nx*Ny*Nz;
  //return -t;
  float u_p = ( (1.0f-delta_x)*(1.0f-delta_y)*u_3d[ offset ] + (1.0f-delta_x)*delta_y*u_3d[ offset+Nx ] 
             +delta_x*(1.0f-delta_y)*u_3d[ offset+1 ] +   delta_x*delta_y*u_3d[ offset+Nx+1 ] )*(1.0f-delta_z) + 
              ( (1.0f-delta_x)*(1.0f-delta_y)*u_3d[ offset_n ] + (1.0f-delta_x)*delta_y*u_3d[ offset_n+Nx ] 
             +delta_x*(1.0f-delta_y)*u_3d[ offset_n+1 ] +   delta_x*delta_y*u_3d[ offset_n+Nx+1 ] )*delta_z;
  
  offset += Nx*Ny*Nz;
  offset_n += Nx*Ny*Nz;             
  float u_n = ( (1.0f-delta_x)*(1.0f-delta_y)*u_3d[ offset ] + (1.0f-delta_x)*delta_y*u_3d[ offset+Nx ] 
             +delta_x*(1.0f-delta_y)*u_3d[ offset+1 ] +   delta_x*delta_y*u_3d[ offset+Nx+1 ] )*(1.0f-delta_z) + 
              ( (1.0f-delta_x)*(1.0f-delta_y)*u_3d[ offset_n ] + (1.0f-delta_x)*delta_y*u_3d[ offset_n+Nx ] 
              +delta_x*(1.0f-delta_y)*u_3d[ offset_n+1 ] +   delta_x*delta_y*u_3d[ offset_n+Nx+1 ] )*delta_z;
  return (1.0f - delta_t)*u_p + delta_t*u_n;
}

__inline__ __device__ float
interp3Dtemperature(float* u_3d, float x, float y, float z, int Nx, int Ny, int Nz, float Dx)
{

  int kx = (int) (x/Dx);
  int ky = (int) (y/Dx);
  int kz = (int) (z/Dx);


  float delta_x = x/Dx - kx;
  float delta_y = y/Dx - ky;
  float delta_z = z/Dx - kz;


  if (kx==Nx-1) 
  {
    kx = Nx-2; 
    delta_x = 1.0f;
  }
  if (ky==Ny-1) 
  {
    ky = Ny-2; 
    delta_y = 1.0f;
  }
  if (kz==Nz-1) 
  {
    kz = Nz-2; 
    delta_z = 1.0f;
  }


  int offset =  kx + ky*Nx + kz*Nx*Ny;
  int offset_n =  kx + ky*Nx + (kz+1)*Nx*Ny;

  float u_p = ( (1.0f-delta_x)*(1.0f-delta_y)*u_3d[ offset ] + (1.0f-delta_x)*delta_y*u_3d[ offset+Nx ] 
             +delta_x*(1.0f-delta_y)*u_3d[ offset+1 ] +   delta_x*delta_y*u_3d[ offset+Nx+1 ] )*(1.0f-delta_z) + 
              ( (1.0f-delta_x)*(1.0f-delta_y)*u_3d[ offset_n ] + (1.0f-delta_x)*delta_y*u_3d[ offset_n+Nx ] 
             +delta_x*(1.0f-delta_y)*u_3d[ offset_n+1 ] +   delta_x*delta_y*u_3d[ offset_n+Nx+1 ] )*delta_z;

  return u_p;
}
